# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'edgeeyedesign.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import asyncio
import platform

from bleak import BleakScanner
from bleak import BleakClient

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *

EDGE_SERVICE_UUID = "f64f0000-7fdf-4b2c-ad31-e65ca15bef6b"
CH_GETIMAGE_UUID = "f64f0100-7fdf-4b2c-ad31-e65ca15bef6b"
CH_SNAP_UUID = "f64f0200-7fdf-4b2c-ad31-e65ca15bef6b"
CH_SETRTC_UUID = "f64f0300-7fdf-4b2c-ad31-e65ca15bef6b"
#----------- dict for save device, service List-------------#
ble_devices = {}
ble_services = {}
#-----------------------------------------------------------#
window = 0
# window 0 : Device , 1 : Service , 2: getImage, 3: Snap , 4: setRTC


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(480, 640)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(70,0,340,123))
        titlepix = QPixmap("edgetitle.png")
        self.label.setPixmap(QPixmap(titlepix))

        # background Frame
        self.background = QtWidgets.QFrame(self.centralwidget)
        self.background.setGeometry(QtCore.QRect(0, 0, 480, 640))
        self.background.setStyleSheet("background-color: rgb(255, 255,255)")
        self.background.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.background.setFrameShadow(QtWidgets.QFrame.Raised)
        self.background.setObjectName("background")

        # DeviceList
        self.deviceList = QtWidgets.QListWidget(self.background)
        self.deviceList.setGeometry(QtCore.QRect(40, 130, 400, 300))
        self.deviceList.setObjectName("deviceList")
        self.deviceList.itemDoubleClicked.connect(self.device_selected)

        # Scan Btn
        self.Btn_scan = QtWidgets.QPushButton(self.background)
        self.Btn_scan.setGeometry(QtCore.QRect(40, 480, 400, 40))
        self.Btn_scan.setStyleSheet("background-color: rgb(221, 221, 221)")
        self.Btn_scan.setObjectName("Btn_scan")
        self.Btn_scan.clicked.connect(self.Btn_scan_clicked)

        self.background.raise_()
        self.label.raise_()
        MainWindow.setCentralWidget(self.centralwidget)

        # menu bar setting
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 480, 26))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        MainWindow.setMenuBar(self.menubar)

        # status bar setting
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        #Home button
        self.actiondkdh = QtWidgets.QAction(MainWindow)
        self.actiondkdh.setObjectName("actiondkdh")

        #Close button
        self.actionclose = QtWidgets.QAction(MainWindow)
        self.actionclose.setObjectName("actionclose")
        self.actionclose.setStatusTip("close app")
        self.actionclose.triggered.connect(qApp.quit)

        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actiondkdh)
        self.menuFile.addAction(self.actionclose)
        self.menuFile.addSeparator()
        self.menubar.addAction(self.menuFile.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    # if click Scan button, push devicelist in QListView
    def Btn_scan_clicked(self):
        global ble_devices
        self.deviceList.clear()
        scanningmsg = QListWidgetItem("Scanning... (please waiting about 10 seconds)")
        scanningmsg.setFlags(QtCore.Qt.NoItemFlags) #disable callback func
        self.deviceList.addItem(scanningmsg)
        self.deviceList.repaint()

        # 주변 장치를 Scan하고 저장하는 findDevice()함수를 실행한다.
        loop = asyncio.get_event_loop()
        loop.run_until_complete(findDevice())

        # Scan 후 device들이 저장된 dict를 출력해준다.
        self.deviceList.clear()
        for key, value in ble_devices.items():
            self.deviceList.addItem(key+" : "+value)
        self.deviceList.repaint()

    # item selected double click call back func
    def device_selected(self):
        global window
        if window == 0: # device List화면에서 더블클릭시
            mac_adr = self.deviceList.selectedItems()[0].text()[:17]
            dev_name = self.deviceList.selectedItems()[0].text()[19:]
            res = QtWidgets.QMessageBox.question(None,"Edge Eye","connect to " + dev_name)
            if (res == QMessageBox.Yes):
                self.device_selected_yes(mac_adr,dev_name)
        elif window == 1: # service List 화면에서 더블클릭시
            service_name = self.deviceList.selectedItems()[0].text()
            if (QtWidgets.QMessageBox.question(None,"Edge Eye","Select [" + service_name + "]") == QMessageBox.Yes):
                self.device_selected_yes(1234,2020)

    # 사용자가 yes를 눌렀을 경우의 동작함수
    def device_selected_yes(self,mac_address,dev_name):
        global window
        if window == 0: #device list 화면에서 yes시
            self.deviceList.clear()
            connectmsg = QListWidgetItem("Connecting... (please wait a 10 second or more)")
            self.deviceList.addItem(connectmsg)
            connectmsg.setFlags(QtCore.Qt.NoItemFlags) #disable callback func
            self.deviceList.repaint()
            self.Btn_scan.hide()
            self.device_selected_get_service(mac_address,dev_name)
        elif window == 1: #service list 화면에서 yes시
            self.debug_dialog("debug","window1 selected yes")

    # 장비를 선택하고, yes버튼을 눌렀을 때의 함수
    def device_selected_get_service(self,mac_address,dev_name):
        global ble_services
        global ble_devices
        global window

        loop = asyncio.get_event_loop()
        loop.run_until_complete(findService(mac_address, loop))
        if len(ble_services):
            self.deviceList.clear()
            for key,value in ble_services.items():
                if (key == EDGE_SERVICE_UUID):
                    self.deviceList.addItem("Edge_eye Service")
                else:
                    item = QListWidgetItem(value[0])
                    self.deviceList.addItem(item)
                self.deviceList.addItem(key)
            self.deviceList.repaint()
            window = 1
        else:
            self.deviceList.clear()
            for key, value in ble_devices.items():
                self.deviceList.addItem(key+" : "+value)
            self.deviceList.repaint()
            self.Btn_scan.show()
            window = 0
            self.debug_dialog("Edge Eye","connecting fail... please reselect")


    # debug function
    def debug_dialog(self,title,msg):
        QtWidgets.QMessageBox.about(None,title,msg)

    # Utf-8 retranslate
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "EdgeEye"))
        self.Btn_scan.setText(_translate("MainWindow", "Scan"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.actiondkdh.setText(_translate("MainWindow", "Home"))
        self.actionclose.setText(_translate("MainWindow", "close"))

#bleak func
#서비스 목록 가져오는 함수
async def findService(mac_addr: str, loop: asyncio.AbstractEventLoop):
    global ble_services
    try:
        async with BleakClient(mac_addr, loop=loop, timeout=10.0) as client:
            svcs = client.services
            for service in svcs:
                # print("Services : " + service.uuid + " Desc : " + service.description)
                valuelist = []
                valuelist.append(service.description)
                for char in service.characteristics:
                    valuelist.append(char.uuid)
                ble_services.setdefault(service.uuid,valuelist)
    except:
        print("not connect T.T")
#장비 목록 가져오는 함수
async def findDevice():
    global ble_devices
    ble_devices.clear()
    devices = await BleakScanner.discover(10)
    for d in devices:
        ble_devices.setdefault(d.address,d.name)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
