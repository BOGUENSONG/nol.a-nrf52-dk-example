# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'edgeeyedesign.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import asyncio
import platform

from bleak import BleakScanner
from bleak import BleakClient

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *

GAP = "00001800-0000-1000-8000-00805f9b34fb"
GATT = "00001801-0000-1000-8000-00805f9b34fb"
EDGE_SERVICE_UUID = "f64f0000-7fdf-4b2c-ad31-e65ca15bef6b"
CH_GETIMAGE_UUID = "f64f0100-7fdf-4b2c-ad31-e65ca15bef6b"
CH_SNAP_UUID = "f64f0200-7fdf-4b2c-ad31-e65ca15bef6b"
CH_SETRTC_UUID = "f64f0300-7fdf-4b2c-ad31-e65ca15bef6b"
#----------- dict for save device, service List-------------#
ble_devices = {}
ble_services = {}
ble_service_name = { "Edge_Eye_Service": EDGE_SERVICE_UUID, "Generic_Access_Profile": GAP, "Generic_Attribute_Profile": GATT }
ble_service_name_reverse = { EDGE_SERVICE_UUID : "Edge_Eye_Service", GAP : "Generic_Access_Profile", GATT:"Generic_Attribute_Profile" }
ble_character_name = { CH_GETIMAGE_UUID : "GET_IMAGE", CH_SNAP_UUID : "SNAP", CH_SETRTC_UUID : "SETRTC" }
image_dic = { "0001.jpg" : 8720 , "0002.jpg" : 1234 }
snap_format = [ "JPG (low)", "JPG (mid)", "JPG (High)", "24bit BMP"]
#-----------------------------------------------------------#
window = 0
# window 0 : Device , 1 : Service , 2: getImage, 3: Snap , 4: setRTC


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(480, 640)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(70,0,340,123))
        titlepix = QPixmap("edgetitle.png")
        self.label.setPixmap(QPixmap(titlepix))

        # background Frame
        self.background = QtWidgets.QFrame(self.centralwidget)
        self.background.setGeometry(QtCore.QRect(0, 0, 480, 640))
        self.background.setStyleSheet("background-color: rgb(255, 255,255)")
        self.background.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.background.setFrameShadow(QtWidgets.QFrame.Raised)
        self.background.setObjectName("background")

        #Fonts
        font_Cooper = QtGui.QFont()
        font_Cooper.setFamily("Cooper Black")
        font_Cooper.setPointSize(14)

        font_TNR = QtGui.QFont()
        font_TNR.setFamily("Times New Roman")
        font_TNR.setPointSize(18)

        # DeviceList
        self.deviceList = QtWidgets.QListWidget(self.background)
        self.deviceList.setGeometry(QtCore.QRect(40, 130, 400, 300))
        self.deviceList.setObjectName("deviceList")
        self.deviceList.itemDoubleClicked.connect(self.device_selected)

        # combo_service
        self.combo_service = QtWidgets.QComboBox(self.background)
        self.combo_service.setGeometry(QtCore.QRect(90, 230, 311, 21))
        self.combo_service.setObjectName("combo_service")
        self.combo_service.currentIndexChanged.connect(self.change_combo)
        self.combo_service.hide()

        self.combo_char = QtWidgets.QComboBox(self.background)
        self.combo_char.setGeometry(QtCore.QRect(90, 330, 311, 21))
        self.combo_char.setObjectName("combo_char")
        self.combo_char.hide()

        #Label
        self.label_service = QtWidgets.QLabel(self.background)
        self.label_service.setGeometry(QtCore.QRect(90, 190, 300, 20))
        self.label_service.setObjectName("label_service")
        self.label_service.setAlignment(QtCore.Qt.AlignCenter)
        self.label_service.setText("Service")
        self.label_service.hide()

        self.label_char = QtWidgets.QLabel(self.background)
        self.label_char.setGeometry(QtCore.QRect(90, 290, 300, 20))
        self.label_char.setObjectName("label_char")
        self.label_char.setAlignment(QtCore.Qt.AlignCenter)
        self.label_char.setText("Characteristic")
        self.label_char.hide()

        # Scan Btn
        self.Btn_scan = QtWidgets.QPushButton(self.background)
        self.Btn_scan.setGeometry(QtCore.QRect(40, 480, 400, 40))
        self.Btn_scan.setStyleSheet("background-color: rgb(221, 221, 221)")
        self.Btn_scan.setObjectName("Btn_scan")
        self.Btn_scan.clicked.connect(self.Btn_scan_clicked)

        # Service Btn
        self.Btn_service = QtWidgets.QPushButton(self.background)
        self.Btn_service.setGeometry(QtCore.QRect(40, 480, 400, 40))
        self.Btn_service.setStyleSheet("background-color: rgb(221, 221, 221)")
        self.Btn_service.clicked.connect(self.Btn_service_clicked)
        self.Btn_service.setText("Ok")
        self.Btn_service.hide()

        self.background.raise_()
        self.label.raise_()
        MainWindow.setCentralWidget(self.centralwidget)

        # menu bar setting
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 480, 26))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        MainWindow.setMenuBar(self.menubar)

        # status bar setting
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        #Home button
        self.actiondkdh = QtWidgets.QAction(MainWindow)
        self.actiondkdh.setObjectName("actiondkdh")

        #Close button
        self.actionclose = QtWidgets.QAction(MainWindow)
        self.actionclose.setObjectName("actionclose")
        self.actionclose.setStatusTip("close app")
        self.actionclose.triggered.connect(qApp.quit)

        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actiondkdh)
        self.menuFile.addAction(self.actionclose)
        self.menuFile.addSeparator()
        self.menubar.addAction(self.menuFile.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

###########################################################################
        # Snap UI
        self.ui_snap_Label = QtWidgets.QLabel(self.background)
        self.ui_snap_Label.setGeometry(QtCore.QRect(45, 140, 390, 40))
        self.ui_snap_Label.setFont(font_Cooper)
        self.ui_snap_Label.setAlignment(QtCore.Qt.AlignCenter)
        self.ui_snap_Label.setObjectName("ui_snap_Label")
        self.ui_snap_Label.setText("Snap")
        self.ui_snap_Label.hide()

        self.ui_snap_list = QtWidgets.QListWidget(self.background)
        self.ui_snap_list.setGeometry(QtCore.QRect(70, 190, 340, 220))
        self.ui_snap_list.setObjectName("ui_snap_list")
        self.ui_snap_list.setFont(font_TNR)
        self.ui_snap_list.hide()

        # Set RTC UI
        self.ui_setRTC_Label = QtWidgets.QLabel(self.background)
        self.ui_setRTC_Label.setGeometry(QtCore.QRect(45,140,390,40))
        self.ui_setRTC_Label.setFont(font_Cooper)
        self.ui_setRTC_Label.setAlignment(QtCore.Qt.AlignCenter)
        self.ui_setRTC_Label.setObjectName("ui_setRTC_Label")
        self.ui_setRTC_Label.setText("SET RTC")
        self.ui_setRTC_Label.hide()

        self.ui_setRTC_Time = QtWidgets.QDateTimeEdit(self.background)
        self.ui_setRTC_Time.setGeometry(QtCore.QRect(140, 290, 194, 22))
        self.ui_setRTC_Time.setObjectName("ui_setRTC_Time")
        self.ui_setRTC_Time.hide()

        # Get Image UI
        self.ui_getIMG_Label = QtWidgets.QLabel(self.background)
        self.ui_getIMG_Label.setGeometry(QtCore.QRect(45, 140, 390, 40))
        self.ui_getIMG_Label.setFont(font_Cooper)
        self.ui_getIMG_Label.setAlignment(QtCore.Qt.AlignCenter)
        self.ui_getIMG_Label.setObjectName("ui_getIMG_Label")
        self.ui_getIMG_Label.setText("get Image")
        self.ui_getIMG_Label.hide()

        self.ui_getIMG_list = QtWidgets.QListWidget(self.background)
        self.ui_getIMG_list.setGeometry(QtCore.QRect(70,190,340,220))
        self.ui_getIMG_list.setObjectName("ui_getIMG_list")
        self.ui_getIMG_list.hide()
###########################################################################
    def Btn_service_clicked(self):
        selected_service = self.combo_char.currentText()
        res = QtWidgets.QMessageBox.question(None,"Edge Eye","Are you sure " + selected_service + " service?")
        if (res == QMessageBox.Yes):
            self.Btn_service.clicked.disconnect(self.Btn_service_clicked)
            self.combo_char.hide()
            self.combo_service.hide()
            self.label_char.hide()
            self.label_service.hide()
            if (selected_service == "GET_IMAGE"):
                self.ui_getIMG_list.clear()
                for key,value in image_dic.items():
                    self.ui_getIMG_list.addItem(key + " : " + str(value))
                self.ui_getIMG_list.repaint()

                self.ui_getIMG_list.show()
                self.ui_getIMG_Label.show()
                self.Btn_service.setText("GET")
                self.Btn_service.clicked.connect(self.Btn_getIMG_clicked)
            elif (selected_service == "SNAP"):
                self.ui_snap_list.clear()
                for format in snap_format:
                    self.ui_snap_list.addItem(format)
                self.ui_snap_list.repaint()

                self.ui_snap_Label.show()
                self.ui_snap_list.show()
                self.Btn_service.setText("SNAP")
                self.Btn_service.clicked.connect(self.Btn_snap_clicked)
            elif(selected_service == "SETRTC"):
                self.ui_setRTC_Time.show()
                self.ui_setRTC_Label.show()
                self.Btn_service.setText("SET")
                self.Btn_service.clicked.connect(self.Btn_setRTC_clicked)
            else:
                print("Wow")

    # if click Scan button, push devicelist in QListView
    def Btn_scan_clicked(self):
        global ble_devices
        self.deviceList.clear()
        scanningmsg = QListWidgetItem("Scanning... (please waiting about 10 seconds)")
        scanningmsg.setFlags(QtCore.Qt.NoItemFlags) #disable callback func
        self.deviceList.addItem(scanningmsg)
        self.deviceList.repaint()

        # 주변 장치를 Scan하고 저장하는 findDevice()함수를 실행한다.
        loop = asyncio.get_event_loop()
        loop.run_until_complete(findDevice())

        # Scan 후 device들이 저장된 dict를 출력해준다.
        self.deviceList.clear()
        for key, value in ble_devices.items():
            self.deviceList.addItem(key+" : "+value)
        self.deviceList.repaint()

    # item selected double click call back func
    def device_selected(self):
        global window
        if window == 0: # device List화면에서 더블클릭시
            mac_adr = self.deviceList.selectedItems()[0].text()[:17]
            dev_name = self.deviceList.selectedItems()[0].text()[19:]
            res = QtWidgets.QMessageBox.question(None,"Edge Eye","connect to " + dev_name)
            if (res == QMessageBox.Yes):
                self.device_selected_yes(mac_adr,dev_name)
        elif window == 1: # service List 화면에서 더블클릭시
            service_name = self.deviceList.selectedItems()[0].text()
            if (QtWidgets.QMessageBox.question(None,"Edge Eye","Select [" + service_name + "]") == QMessageBox.Yes):
                self.device_selected_yes(1234,2020)

    # 사용자가 yes를 눌렀을 경우의 동작함수
    def device_selected_yes(self,mac_address,dev_name):
        global window
        if window == 0: #device list 화면에서 yes시
            self.deviceList.clear()
            connectmsg = QListWidgetItem("Connecting... (please wait a 10 second or more)")
            self.deviceList.addItem(connectmsg)
            connectmsg.setFlags(QtCore.Qt.NoItemFlags) #disable callback func
            self.deviceList.repaint()
            self.Btn_scan.hide()
            self.device_selected_get_service(mac_address,dev_name)
        elif window == 1: #service list 화면에서 yes시
            self.debug_dialog("debug","window1 selected yes")

    # 장비를 선택하고, yes버튼을 눌렀을 때의 함수
    def device_selected_get_service(self,mac_address,dev_name):
        global ble_services
        global ble_devices
        global window

        loop = asyncio.get_event_loop()
        loop.run_until_complete(findService(mac_address, loop))
        if len(ble_services):
            self.deviceList.clear()
            self.deviceList.repaint()
            for key,value in ble_services.items():
                if key in ble_service_name_reverse:
                    self.combo_service.addItem(ble_service_name_reverse[key])
                else:
                    self.combo_service.addItem(key)
            self.combo_service.show()
            self.combo_char.show()
            self.label_service.show()
            self.label_char.show()
            self.Btn_service.show()
            window = 1
        else:
            self.deviceList.clear()
            for key, value in ble_devices.items():
                self.deviceList.addItem(key+" : "+value)
            self.deviceList.repaint()
            self.Btn_scan.show()
            window = 0
            self.debug_dialog("Edge Eye","connecting fail... please reselect")

    # Combobox Change event
    def change_combo(self):
        self.combo_char.clear()
        currentText = self.combo_service.currentText()
        if currentText in ble_service_name:
            for value in ble_services[ble_service_name[currentText]]:
                if value in ble_character_name:
                    self.combo_char.addItem(ble_character_name[value])
                else:
                    self.combo_char.addItem(value)
        else:
            for value in ble_services[currentText]:
                if value in ble_character_name:
                    self.combo_char.addItem(ble_character_name[value])
                else:
                    self.combo_char.addItem(value)

    # debug function
    def debug_dialog(self,title,msg):
        QtWidgets.QMessageBox.about(None,title,msg)

    # Utf-8 retranslate
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "EdgeEye"))
        self.Btn_scan.setText(_translate("MainWindow", "Scan"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.actiondkdh.setText(_translate("MainWindow", "Home"))
        self.actionclose.setText(_translate("MainWindow", "close"))

    #Service, Char list view show
    def reload_service(self):
        self.Btn_service.clicked.connect(self.Btn_service_clicked)
        self.Btn_service.setText("Ok")
        self.combo_char.show()
        self.combo_service.show()
        self.label_char.show()
        self.label_service.show()
    #services
    def Btn_snap_clicked(self):
        self.ui_snap_list.hide()
        self.ui_snap_Label.hide()
        self.Btn_service.clicked.disconnect(self.Btn_snap_clicked)
        self.reload_service()

    def Btn_getIMG_clicked(self):
        self.ui_getIMG_list.hide()
        self.ui_getIMG_Label.hide()
        self.Btn_service.clicked.disconnect(self.Btn_getIMG_clicked)
        self.reload_service()

    def Btn_setRTC_clicked(self):
        self.ui_setRTC_Time.hide()
        self.ui_setRTC_Label.hide()
        self.Btn_service.clicked.disconnect(self.Btn_setRTC_clicked)
        self.reload_service()

#################################################################
#bleak func
#서비스 목록 가져오는 함수
async def findService(mac_addr: str, loop: asyncio.AbstractEventLoop):
    global ble_services
    try:
        async with BleakClient(mac_addr, loop=loop, timeout=5.0) as client:
            svcs = client.services
            for service in svcs:
                # print("Services : " + service.uuid + " Desc : " + service.description)
                valuelist = []
                valuelist.append( "[ DESC : " + service.description + " ]")
                for char in service.characteristics:
                    valuelist.append(char.uuid)
                ble_services.setdefault(service.uuid,valuelist)
    except:
        print("not connect T.T")
#장비 목록 가져오는 함수
async def findDevice():
    global ble_devices
    ble_devices.clear()
    devices = await BleakScanner.discover(10)
    for d in devices:
        ble_devices.setdefault(d.address,d.name)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
